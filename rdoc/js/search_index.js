var search_data = {"index":{"searchIndex":["clean","test","any","givenwhenthen","testcase","testthat","classmethods","and()","but()","given()","then()","when()","any_int()","any_number()","any_sentence()","any_string()","any_symbol()","default_test()","included()","included()","mocks_shouldve_been_called()","skip_a_test_that()","someday_test_that()","test_that()","the_test_runs()","readme"],"longSearchIndex":["clean","clean::test","clean::test::any","clean::test::givenwhenthen","clean::test::testcase","clean::test::testthat","clean::test::testthat::classmethods","clean::test::givenwhenthen#and()","clean::test::givenwhenthen#but()","clean::test::givenwhenthen#given()","clean::test::givenwhenthen#then()","clean::test::givenwhenthen#when()","clean::test::any#any_int()","clean::test::any#any_number()","clean::test::any#any_sentence()","clean::test::any#any_string()","clean::test::any#any_symbol()","clean::test::testcase#default_test()","clean::test::any::included()","clean::test::testthat::included()","clean::test::givenwhenthen#mocks_shouldve_been_called()","clean::test::testthat::classmethods#skip_a_test_that()","clean::test::testthat::classmethods#someday_test_that()","clean::test::testthat::classmethods#test_that()","clean::test::givenwhenthen#the_test_runs()",""],"info":[["Clean","","classes/Clean.html","",""],["Clean::Test","","classes/Clean/Test.html","",""],["Clean::Test::Any","","classes/Clean/Test/Any.html","","<p>Provides the ability to vend arbitrary values without using literals, or\nlong calls to Faker.  This produced ...\n"],["Clean::Test::GivenWhenThen","","classes/Clean/Test/GivenWhenThen.html","","<p>A means of documenting the parts of your test code according to the class\n\"Given/When/Then\" ...\n"],["Clean::Test::TestCase","","classes/Clean/Test/TestCase.html","","<p>A Base class brings in all modules that are part of Clean::Test.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">class</span> <span class=\"ruby-constant\">TestCircle</span> <span class=\"ruby-operator\">&lt;</span> <span class=\"ruby-constant\">Clean</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Test</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">TestCase</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["Clean::Test::TestThat","","classes/Clean/Test/TestThat.html","","<p>Module that, when included, makes a class method, <code>#test_that</code>\navailable to create test methods in a more ...\n"],["Clean::Test::TestThat::ClassMethods","","classes/Clean/Test/TestThat/ClassMethods.html","",""],["And","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-And","(existing_block=nil,*other_args,&block)","<p>Extend a Given/When/Then when using method or lambda form. Behavior\nidentical to Given\n"],["But","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-But","(existing_block=nil,*other_args,&block)","<p>Extend a Given/When/Then when using method or lambda form. Behavior\nidentical to Given\n"],["Given","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-Given","(existing_block=nil,*other_args,&block)","<p>Declare a step in your test, based on the following conventions:\n<p>Given &mdash; This sets up conditions for the ...\n"],["Then","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-Then","(existing_block=nil,*other_args,&block)","<p>Assert the results of the test. Behavior identical to Given\n"],["When","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-When","(existing_block=nil,*other_args,&block)","<p>Execute the code under test.  Behavior identical to Given\n"],["any_int","Clean::Test::Any","classes/Clean/Test/Any.html#method-i-any_int","(*options)","<p>Returns an integer.  options is the same as for #any_number\n"],["any_number","Clean::Test::Any","classes/Clean/Test/Any.html#method-i-any_number","(*options)","<p>Get any number; one that doesn't matter\n<p>options &mdash; options to control what sort of number comes back:\n<p>:positive ... &mdash; "],["any_sentence","Clean::Test::Any","classes/Clean/Test/Any.html#method-i-any_sentence","(options = {})","<p>Get an arbitrary sentence of arbitrary words of any potential length. \nCurrently, this returns a sentence ...\n"],["any_string","Clean::Test::Any","classes/Clean/Test/Any.html#method-i-any_string","(options = {})","<p>Get an arbitrary string of any potential positive length\n<p>options &mdash; options to control the returned string: ...\n"],["any_symbol","Clean::Test::Any","classes/Clean/Test/Any.html#method-i-any_symbol","()","<p>Get an arbitrary symbol, for example to use as a Hash key.  The symbol will\nbe between 2 and 20 characters ...\n"],["default_test","Clean::Test::TestCase","classes/Clean/Test/TestCase.html#method-i-default_test","()","<p>Avoid the stupid behavior of  complaining that no tests were specified for\n1.8.-like rubies\n"],["included","Clean::Test::Any","classes/Clean/Test/Any.html#method-c-included","(k)",""],["included","Clean::Test::TestThat","classes/Clean/Test/TestThat.html#method-c-included","(base)",""],["mocks_shouldve_been_called","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-mocks_shouldve_been_called","()","<p>Similar to #the_test_runs, this is used to make clear what you are testing\nand what the assertions are. ...\n"],["skip_a_test_that","Clean::Test::TestThat::ClassMethods","classes/Clean/Test/TestThat/ClassMethods.html#method-i-skip_a_test_that","(description=nil,&block)","<p>Create a test that you don't want to actually run. This can be handy if you\nwant to temporarily keep ...\n"],["someday_test_that","Clean::Test::TestThat::ClassMethods","classes/Clean/Test/TestThat/ClassMethods.html#method-i-someday_test_that","(description=nil,&block)","<p>Create a test that is pending or that you intend to implement soon. This\ncan be handy for sketching out ...\n"],["test_that","Clean::Test::TestThat::ClassMethods","classes/Clean/Test/TestThat/ClassMethods.html#method-i-test_that","(description=nil,&block)","<p>Create a new test method with the given optional description and body.\n<p>description &mdash; a string describing ...\n"],["the_test_runs","Clean::Test::GivenWhenThen","classes/Clean/Test/GivenWhenThen.html#method-i-the_test_runs","()","<p>Used to make clear the structure of tests using mocks. This returns a\nno-op, and is intended to be used ...\n"],["README","","files/README_rdoc.html","","<p>Clean Tests\n<p>Author &mdash; Dave Copeland (davetron5000 at g mail dot com)\n<p>Copyright &mdash; Copyright (c) 2012 by Dave ...\n"]]}}